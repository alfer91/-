javascript

웹브라우저 : javascript
웹서버 : php, java, python, ... node.js(탈 웹브라우저)
구글 스프레드시트 : 도구 - 스크립트 편집기 - 빈 프로젝트 - javascript 작성 
javascript의 활용도가 웹브라이저를 제어하는 것에서 벗어나 여러 분야에서 점점 영향이 확대되고 있음


실행방법과 실습환경
콘솔 사용법
chrome console 사용, 간단한 javascript 실행, 이미 개발된 웹페이지에서 적용하여 문제 해결 가능 
shift + enter : 실행 보류


숫자와 문자
Number : 정수와 실수 구분이 없음
ex. Math.pow(3,2); Math.round(10.6); Math.ceil(10.2); Math.floor(10.2); Math.sqrt(9); Math.random()*100; Math.round(Math.random()*100);

String : 문자열, "", '', \', \", \n
ex. 'aa'.length, 'aa'.toUpperCase(), 'aa'.indexOf('a'), '   aa   '.trim(), ...
typeof 1, typeof "1"


변수
var 사용


줄바꿈
줄이 바뀌면 자바스크립트는 명령이 끝났다라고 간주, 한 줄에 명령문 하나일 경우 세미콜론이 없어도 실행됨.


연산자(operator)
비교 연산자
===는 서로 같은 수를 표현하고 있더라도 데이터 형이 같은 경우에만 같다고 판단, == 연산자 대신 === 연산자를 쓰는 것을 권장(!== 도 마찬가지)
null == undefined      //true
null === undefined     //false, null은 값이 없음을 명시적으로 표시한 것이고, undefined는 그냥 값이 없는 상태
true == 1              //true
true === 1             //false
true == '1'            //true
true === '1'           //false
0 === -0               //true
NaN === NaN            //false, 0/0과 같은 연산의 결과로 만들어지는 특수한 데이터 형, 숫자가 아니라는 뜻


브라우져에서 디버깅 하는법(debugging)
요소 검사 - source - html파일 선택 - breackpoint 생성 - 새로고침 - step into next function call - Global에서 변수 찾기 힘들기 때문에 Watch expression에서 변수 추가 - breackpoint 해제 - resume script execution


함수(function)
함수 표현 법
function numbering() {}
var numbering() {}

익명 함수
(function () {})(); // 일회성, 함수 정의와 동시에 호출


배열(Array)
배열과 반복문
var arr = [1, 2, 3, 4, 5];

1. for(var i = 0; i < arr.length; i++){
   	document.write(arr[i] + '<br/>'); 
   }

2. for(var i in arr) {       // foreach와 비슷, i가 index
        document.write(arr[i] + '<br/>'); 
   }

배열의 조작
데이터 추가
var li = ['a', 'b'];
li.push('c'); // ['a', 'b', 'c'], 기존 배열 뒤에 원소 추가
li.unshift('z'); // ['d'. 'a', 'b', 'c'], 기존 배열 앞에 원소 추가
li.splice(1,1,'e','f'); // ['d'. 'e', 'f', 'b', 'c'], 설정한 index 뒤에 원소 추가
li = li.concat(['g', 'h']); // ['d'. 'e', 'f', 'b', 'c', 'g', 'h'] // 기존 배열 뒤에 배열 추가

데이터 제거
var li = ['a', 'b', 'c', 'd', 'e'];
li.pop(); // ['a', 'b', 'c', 'd'], 기존 배열 뒤의 원소 제거
li.shift(); // ['b', 'c', 'd'], 기존 배열 앞의 원소 제거


정렬
var li = ['c', 'e', 'a', 'b', 'd'];
li.sort(); // ['a', 'b', 'c', 'd', 'e']; // 배열 정렬
li.reverse(); // ['e', 'd', 'c', 'b', 'a']; // 배열 역순으로 정렬


객체(object)
객체의 생성
1. var grades = {'egoing': 10, 'k8805': 6}; // key, value를 가짐

2. var grades = {};
   grades['egoing'] = 10;
   grades['k8805'] = 6;

3. var grades = new Object();
   grades.egoing = 10;
   grades.k8805 = 6;

객체와 반복문
var grades = {'egoing': 10, 'k8805': 6, 'sorialgi': 80};
for(name in grades) {       // foreach와 비슷, name이 key
    document.write("name : "+name+" value : "+grades[name]+"<br />");
}

객체지향 프로그래밍(OOP)
var grades = {       // 서로 연관있는 것들을 하나의 객체에 그룹핑
    'list': {'egoing': 10, 'k8805': 6, 'sorialgi': 80}, 
    'show' : function(){
        for(var name in this.list){
            console.log(name, this.list[name]);
        }
    }
};
grades.show();


모듈(module)
대표적인 호스트 환경인 웹브라우저에서 로직을 모듈화하는 방법
1) 코드를 여러개의 파일로 분리하는 것
- 자주 사용되는 코드를 별도의 파일로 만들어서 필요할 때마다 재활용할 수 있다.
- 코드를 개선하면 이를 사용하고 있는 모든 애플리케이션의 동작이 개선된다.
- 코드 수정 시에 필요한 로직을 빠르게 찾을 수 있다.
- 필요한 로직만을 로드해서 메모리의 낭비를 줄일 수 있다.
- 한번 다운로드된 모듈은 웹브라우저에 의해서 저장되기 때문에 동일한 로직을 로드 할 때 시간과 네트워크 트래픽을 절약 할 수 있다. (브라우저에서만 해당)

<head>
    <script src="greeting.js"></script> // 연관된 함수들의 정의를 외부 파일로 분리
</head>
<body>
    <script>
        alert(welcome()); // 정의없이 함수 호출 
    </script>
</body>


라이브러리(library)
모듈과 비슷한 개념, 모듈이 프로그램을 구성하는 작은 부품으로서의 로직을 의미한다면 라이브러리는 자주 사용되는 로직을 재사용하기 편리하도록 잘 정리한 일련의 코드들의 집합을 의미 (jquery)


정규표현식(regular expression)
정규표현식은 컴파일(compile)과 실행(execution) 두가지 단계로 이루어짐

컴파일
필요한 대상, 패턴을 찾음
1. var pattern = /a/;    // 정규표현식 리터럴
2. var pattern = new RegExp('a');    // 정규표현식 객체 생성자

정규표현식 메소드 실행
추출, test, 치환
var pattern = /a./;    // 하나의 문자(.)가 와야함
pattern.exec('abcdef'); // ["ab"], 추출
pattern.exec('bcdefg'); // null
pattern.test('abcdef'); // true, 존재 유무를 test
pattern.test('bcdefg'); // false

문자열 메소드 실행
문자열 객체의 몇몇 메소드는 정규표현식을 사용할 수 있음
var pattern = /a/;
'abcdef'.match(pattern); // ["a"], RegExp.exec()와 비슷
'bcdefg'.match(pattern)); // null
'abcdef'.replace(pattern, 'A');  // Abcdef, 치환, 문자열에서 패턴을 검색해서 변경

옵션
i    // i를 붙이면 대소문자를 구분하지 않음
var xi = /a/;
"Abcde".match(xi); // null
var oi = /a/i;
"Abcde".match(oi); // ["A"];

g    // g를 붙이면 검색된 모든 결과를 리턴
var xg = /a/;
"abcdea".match(xg);
var og = /a/g;
"abcdea".match(og); // ["a", "a"]

캡처
그룹을 지정하고 지정된 그룹을 가져와서 사용하는 기능
var pattern = /(\w+)\s(\w+)/;      // ():그룹, \w:문자(a~z,A~Z,0~9), +:수량자(하나 이상), \s:스페이스
var str = "coding everybody";
var result = str.replace(pattern, "$2, $1"); // $:그룹선택
console.log(result); // everybody, coding

치환
var urlPattern = /\b(?:https?):\/\/[a-z0-9-+&@#\/%?=~_|!:,.;]*/gim;      // url 패턴
var content = '생활코딩 : http://opentutorials.org/course/1 입니다. 네이버 : http://naver.com 입니다. ';
var result = content.replace(urlPattern, function(url){    
    return '<a href="'+url+'">'+url+'</a>';    // 패턴으로 url을 찾아서 url에 a태그를 붙여줌
});
console.log(result); // 생활코딩 : <a href="http://opentutorials.org/course/1">http://opentutorials.org/course/1</a> 입니다. 네이버 : <a href="http://naver.com">http://naver.com</a> 입니다.

정규표현식 시각화 : https://regexper.com/


유효범위(Scope)
- 함수 밖에서 변수를 선언하면 전역변수, 함수 안에서 변수를 선언하면 지역변수
- 지역변수의 유효범위는 함수 안이고, 전역변수의 유효범위는 에플리케이션 전역
- 같은 이름의 지역변수와 전역변수가 동시에 정의되어 있다면 지역변수가 우선
- 여러가지 이유로 값이 변경될 수 있기 때문에 전역변수는 사용하지 않는 것이 좋음

불가피하게 전역변수를 사용해야 하는 경우
하나의 객체를 전역변수로 만들고 객체의 속성으로 변수를 관리하고 익명함수를 호출
(function(){
    var MYAPP = {}   // 전역변수, 익명함수로 감싸서 지역변수로 만들어줌
    MYAPP.calculator = {
        'left' : null,
        'right' : null
    }
    MYAPP.coordinate = {
        'left' : null,
        'right' : null
    }
    MYAPP.calculator.left = 10;
    MYAPP.calculator.right = 20;
    function sum(){
        return MYAPP.calculator.left + MYAPP.calculator.right;
    }
    document.write(sum());
}())

유효범위의 대상 (함수)
많은 언어들이 블록(대체로 {,})에 대한 유효범위를 제공하는 것과 달리 자바스크립트는 함수에 대한 유효범위만을 제공
for(var i = 0; i < 1; i++){
    var name = 'coding everybody';
}
alert(name); // coding everybody, for문에서 {}은 유효범위를 가지지 않음

정적 유효범위(static scoping)
자바스크립트는 함수가 선언된 시점에서의 유효범위를 가짐
var i = 5;
function a(){
    var i = 10;
    b();
}
function b(){
    document.write(i);
}
a(); // 5, function b()가 선언된 시점에 i는 5의 값을 가진 전역변수 i임 


값으로서의 함수
1. JavaScript의 함수는 다른 언어의 함수와 다르게 함수가 값, 객체가 될 수 있음
   function a(){}
   var a = function(){}

2. 메소드(method): 객체의 속성 값으로 담겨진 함수
   a = {
       b:function(){}
   };

3. 함수는 값이기 때문에 다른 함수의 인자로 전달될 수 있음
function cal(func, num){ // 매개변수로 함수를 받음
    return func(num)
}
function increase(num){
    return num+1
}
function decrease(num){
    return num-1
}
cal(increase, 1); // 인자로 함수를 전달
cal(decrease, 1);

4. 함수는 함수의 리턴 값으로도 사용할 수 있음
function cal(mode){
    var funcs = {
        'plus' : function(left, right){return left + right},
        'minus' : function(left, right){return left - right}
    }
    return funcs[mode];
}
cal('plus')(2,1); // 3
cal('minus')(2,1); // 1

5. 함수는 배열의 값으로도 사용할 수 있음
var process = [
    function(input){ return input + 10;},
    function(input){ return input * input;},
    function(input){ return input / 2;}
];
var input = 1;
for(var i = 0; i < process.length; i++){
    input = process[i](input);  // 11, 121, 60.5
}
alert(input); // 60.5

콜백
처리의 위임, 함수를 값으로 전달하여 함수의 동작을 바꿀 수 있음 
var numbers = [20, 10, 9,8,7,6,5,4,3,2,1];
numbers.sort(sortNumber); // [1, 10, 2, 20, 3, 4, 5, 6, 7, 8, 9], 문자로 정렬됨
function sortNumber(a,b){
    /* 
    if(a > b){
       return 1;
    } else if(a < b) {
       return -1;
    } else {
       return 0;
    } 
    */
    return a-b; 
}
numbers.sort(sortNumber); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20], 인자로 전달된 함수 sortNumber의 구현에 따라서 sort의 동작방법이 바뀜(콜백)

비동기 처리
콜백은 비동기처리에서도 유용하게 사용됨, 시간이 오래걸리는 작업이 있을 때 이 작업이 완료된 후에 처리해야 할 일을 콜백으로 지정하면 해당 작업이 끝났을 때 미리 등록한 작업을 실행하도록 할 수 있음, Ajax(Asynchronous Javascript and XML)

datasource.json.js
{"title":"JavaScript","author":"egoing"}

demo1.html
$.get('./datasource.json.js', function(result){ // 인자로 함수를 전달함으로써 get의 동작을 바꿀수 있음(콜백)
    console.log(result);
}, 'json');


클로저(closure)
내부함수가 외부함수의 맥락(context)에 접근할 수 있는 것

1. 내부함수는 외부함수의 지역변수에 접근 할 수 있음
   function outter(){  // 외부 함수
       var title = 'coding everybody';  // 외부함수의 지역변수
       function inner(){   // 내부 함수        
           alert(title);
       }
       inner();
   }
   outter(); // coding everybody

2. 외부함수의 실행이 끝나서 외부함수가 소멸된 이후에도 내부함수가 외부함수의 변수에 접근 할 수 있음, 외부함수는 외부함수의 지역변수를 사용하는 내부함수가 소멸될 때까지 소멸되지 않음
   function outter(){
       var title = 'coding everybody';  
       return function(){   // 내부 함수        
           alert(title);
       }
   }
var inner = outter();
inner();

3. 클로저는 객체의 메소드에서도 사용할 수 있음
   function factory_movie(title){  // 외부함수의 지역변수 title, 객체의 메소드를 통해서만 접근 가능(private)
       return {
           get_title : function (){  // 메소드
               return title;
           },
           set_title : function(_title){  // 메소드
               title = _title
           }
       }
   }
   var ghost = factory_movie('Ghost in the shell');  // ghost와 matrix는 서로 독립된 객체
   var matrix = factory_movie('Matrix');
 
   ghost.get_title();  // Ghost in the shell
   matrix.get_title();  // Matrix
 
   ghost.set_title('공각기동대');
 
   ghost.get_title();  // 공각기동대
   matrix.get_title();  // Matrix

4. 클로저 실수하기 쉬운 예제
   var arr = []
   for(var i = 0; i < 5; i++){  // for문은 유효범위를 가지지 않음, i는 전역변수
       arr[i] = function(){
           return i;
       }
   }
   for(var index in arr) {
       console.log(arr[index]());  // 5, 5, 5, 5, 5, 배열의 값으로 있는 함수 실행
   }

   변경 후
   var arr = []
   for(var i = 0; i < 5; i++){
       arr[i] = function(id) {    // 외부함수에 지역변수 id를 만듬
           return function(){    // 내부함수를 리턴함
               return id;
           }
       }(i);   // 외부함수를 정의함과 동시에 인자로 i를 전달하며 실행
   }
   for(var index in arr) {
       console.log(arr[index]());  // 0, 1, 2, 3, 4
   }


argument
함수에는 arguments라는 변수에 담긴 숨겨진 유사 배열(객체)이 있음
function sum(){
    var i, _sum = 0;    
    for(i = 0; i < arguments.length; i++){
        document.write(i+' : '+arguments[i]+'<br />');  // 1, 2, 3, 4
        _sum += arguments[i];
    }   
    return _sum;
}
document.write('result : ' + sum(1,2,3,4));  // 10, 함수의 정의부분에서 인자에 대한 구현이 없음에도 인자를 전달 할 수 있음

매개변수의 수
함수에 정의된 매개변수의 수와 함수로 전달된 실제 인자의 수를 비교하여 다를 경우 경고를 띄어줄수 있음
function one(arg1){
    console.log(
        'one.length', one.length,  // 함수에 정의된 매개변수의 수
        'arguments', arguments.length  // 함수로 전달된 실제 인자의 수
    );
}
one('val1', 'val2');  // one.length 1, arguments 2 

함수의 호출 apply
함수는 객체 Function이 가지고 있는 메소드들 apply, call,... 을 상속받음
function sum(arg1, arg2){
    return arg1+arg2;
}
sum.apply(null, [1,2]);  // 3, 배열에 담겨있는 원소가 함수(sum)의 인자로 순차적으로 대입됨


var o1 = {val1:1, val2:2, val3:3}
var o2 = {v1:10, v2:50, v3:100, v4:25}
function sum(){
    var _sum = 0;
    for(name in this){  // this는 apply의 인자로 들어온 객체
        _sum += this[name];
    }
    return _sum;
}
sum.apply(o1); // 6, apply를 사용하여 함수 sum을 객체에 소속된 메서드처럼 사용
sum.apply(o2); // 185


객체지향
javascript에서의 객체지향 prototype based programming, javascript는 함수형 언어
객체 : 서로 연관된 변수와 함수를 그룹핑한 그릇, 객체 내의 변수를 속성(property), 함수를 메소드(method)라고 부름

객체 생성
var person = {}
person.name = 'egoing';  // 속성
person.introduce = function(){   // 메소드
    return 'My name is '+this.name;
}
document.write(person.introduce());  // My name is egoing


var person = {  // 객체를 정의할 때 값을 셋팅
    'name' : 'leezche',
    'introduce' : function(){
        return 'My name is '+this.name;
    }
}
document.write(person.introduce());  // My name is leezche

생성자와 new
생성자(constructor) : 일반적인 객체지향 언어에서 생성자는 클래스의 소속이지만 자바스크립트에서 객체를 만드는 주체는 함수
function Person(){}
var p1 = new Person();  // 함수에 new를 붙이면 객체의 생성자가 됨
p1.name = 'egoing';
p1.introduce = function(){
    return 'My name is '+this.name; 
}
document.write(p2.introduce());  // My name is egoing


function Person(name){
    this.name = name;
    this.introduce = function(){
        return 'My name is '+this.name; 
    }   
}
var p1 = new Person('egoing');  // 생성자로 값 초기화, 코드의 재사용성을 높일 수 있음
document.write(p1.introduce()+"<br />");  // My name is egoing
 
var p2 = new Person('leezche');
document.write(p2.introduce());  // My name is leezche


전역객체(Global object)
모든 전역변수와 함수는 전역객체 window의 프로퍼티임, 객체를 명시하지 않으면 암시적으로 window의 프로퍼티로 간주
var o = {'func':function(){
    alert('Hello?');
}}
o.func();
window.o.func();

전역객체 API
전역객체의 이름도 호스트환경에 따라서 다른데, 웹브라우저에서 전역객체는 window이지만 node.js에서는 global
전역객체의 메소드 window.alert(), confirm(), prompt(), ...


this
함수가 어디에 속하느냐에 따라서 this가 가리키는 대상이 달라짐
1. 함수호출
   함수를 호출했을 때 this는 전역객체인 window
   function func(){
       if(window === this){  // true
           document.write("window === this");
       }
   }
   func();  // window === this

2. 메소드의 호출
   객체의 소속인 메소드의 this는 객체를 가르킴
   var o = {
      func : function(){
           if(o === this){  // true
               document.write("o === this");
           }
       }
   }
   o.func();  // o === this  

3. 생성자의 호출
   생성자는 빈 객체를 만듬, 이 객체내에서 this는 만들어진 객체를 가르킴
   var funcThis = null; 
 
   function Func(){
       funcThis = this;
   }
   var o1 = Func();  // 함수 호출
   if(funcThis === window){
       document.write('window <br />');
   }
 
   var o2 = new Func();  // 생성자 호출
   if(funcThis === o2){
       document.write('o2 <br />');
   }

4. apply 
   함수의 메소드인 apply, call을 이용하면 this의 값을 제어할 수 있음
   var o = {}
   var p = {}
   function func(){
       switch(this){
           case o:
               document.write('o<br />');
               break;
           case p:
               document.write('p<br />');
               break;
           case window:
               document.write('window<br />');
               break;          
       }
   }
   func();  // window
   func.apply(o);  // o
   func.apply(p);  // p


상속(inheritance)
객체의 로직을 그대로 물려 받는 또 다른 객체를 만들 수 있는 기능을 의미함
function Person(name){  
    this.name = name;
    this.introduce = function(){
        return 'My name is '+this.name; 
    }   
}
var p1 = new Person('egoing');  
p1  //  Person {name: "egoing", introduce: f}, 생성자에 정의된 변수와 메소드가 객체에 포함되어 있음


function Person(name){
    this.name = name;
}
Person.prototype.name=null;
Person.prototype.introduce = function(){
    return 'My name is '+this.name; 
}
var p1 = new Person('egoing');  
p1  // Person {name: "egoing"}, 생성자에 메소드를 제외하고 변수만 정의
Person.prototype  // {name: null, introduce: f, constructor: f}, prototype에 정의한 것은 p1객체에 속하지 않고 Person의 프로퍼티인 prototype에 속함
 
function Programmer(name){
    this.name = name;
}
Programmer.prototype = new Person();  // Programmer가 Person을 상속 받음
Programmer.prototype.coding = function(){  // 새로운 메소드 coding 추가
    return "hello world";
}
 
var p1 = new Programmer('egoing');
document.write(p1.introduce()+"<br />");  // My name is egoing, 부모의 메소드 호출 
document.write(p1.coding()+"<br />");  // hello world


prototype
함수가 가진 용도가 약속되어 있는 특수한 프로퍼티, prototype에 저장된 속성들은 생성자를 통해서 객체가 만들어질 때 그 객체에 연결됨
function Ultra(){}
Ultra.prototype.ultraProp = true;
 
function Super(){}
Super.prototype = new Ultra();
 
function Sub(){}
Sub.prototype = new Super();
 
var o = new Sub();
console.log(o.ultraProp);  // true, Ulta -> Super -> Sub

1. 객체 o에서 ultraProp를 찾음
2. 없다면 Sub.prototype.ultraProp를 찾음
3. 없다면 Super.prototype.ultraProp를 찾음
4. 없다면 Ultra.prototype.ultraProp를 찾음
prototype chain : prototype은 객체와 객체를 연결하는 체인의 역할을 함


표준 내장 객체(Standard Built-in Object)
자바스크립트가 기본적으로 가지고 있는 객체들
Object, Function, Array, String, Boolean, Number, Math, Date, RegExp

배열을 확장
var arr = new Array('seoul','new york','ladarkh','pusan', 'Tsukuba');
function getRandomValueFromArray(haystack){
    var index = Math.floor(Math.random() * haystack.length);  // 내림(0~1 * 5)
    return haystack[index]; 
}
getRandomValueFromArray(arr);  // 배열에서 특정한 값을 랜덤하게 추출

표준내장객체의 확장
함수를 배열 객체에 포함시켜서 마치 배열에 내장된 메소드인 것처럼 사용, 모든 배열에서 사용 가능, Object 객체와 마찬가지로 확장하지 않는 것이 바람직함
Array.prototype.rand = function(){
    var index = Math.floor(this.length*Math.random());  // this는 배열 객체
    return this[index];
}
var arr = new Array('seoul','new york','ladarkh','pusan', 'Tsukuba');
arr.rand();


Object
아무것도 상속받지 않는 순수한 객체, 자바스크립트의 모든 객체는 암시적으로 Object 객체를 상속 받음, 모든 객체는 Object 객체의 프로퍼티를 가지고 있음

Object API
//Object.keys()
var arr = ["a", "b", "c"];
Object.keys(arr);  // (3) ["0", "1", "2"], 배열의 인덱스, 객체의 키를 배열로 리턴, 정의 Object.keys = function(){...} 사용시 인스턴스가 필요 없음, IE9이상

//Object.prototype.toString()
var o = new Object();  
o.toString();  // "[object Object]"  // 객체 생성시 prototype 프로퍼티(객체)가 같이 생성됨

var a = new Array(1,2,3);
a.toString();  // "1,2,3"

Object 확장
Object.prototype.contain = function(neddle) {  // 객체에 인자로 전달된 값이 존재하는지 확인해줌
    for(var name in this){
        if(this[name] === neddle){
            return true;
        }
    }
    return false;
}
var o = {'name':'egoing', 'city':'seoul'}
o.contain('egoing');
var a = ['egoing','leezche','grapittie'];
a.contain('leezche');

Object확장의 위험
모든 객체에 영향을 주기 때문에 Object 객체는 확장하지 않는 것이 바람직함
for(var name in o){
    console.log(name);  // name, city, contain, 객체가 기본적으로 가지고 있을 것으로 예상하고 있는 객체 외에 다른 객체를 가짐
}


데이터 타입
원시(기본) 데이터 타입(primitive type)
숫자, 문자열, 불리언(true/false), null, undefined

객체(참조) 데이터 타입
레퍼객체(wrapper object) : 원시 데이터 형을 객체처럼 다룰 수 있도록 하기 위한 객체를 자바스크립트가 제공 (String, Number, Boolean)
var str = 'coding';
console.log(str.length);  // 6
console.log(str.charAt(0));  // "C", 내부적으로 문자열이 원시 데이터 타입이고 문자열과 관련된 어떤 작업을 하려고 할 때 자바스크립트는 임시로 문자열 객체를 만들고 사용이 끝나면 제거함

null과 undefined는 레퍼 객체가 존재하지 않음


복제(call by value)
var a = 1;
var b = a;
b = 2;
console.log(a); // 1

참조(call by reference)
var a = {'id':1};
var b = a;
b.id = 2;
console.log(a.id);  // 2

var a = {'id':1};
function func(b){
    b = {'id':2};  // 새로운 객체를 생성
}
func(a);
console.log(a.id);  // 1

var a = {'id':1};
function func(b){
    b.id = 2;  // a객체의 값도 변경
}
func(a);
console.log(a.id);  // 2


