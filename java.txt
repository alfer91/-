자바(java)

데이터 타입
데이터 크기
8 bit (비트)			1 byte
1024 byte (바이트)		1 kilobyte
1024 kilobyte (킬로바이트)	1 megabyte
1024 megabyte (메가바이트)	1 gigabyte
1024 gigabyte (기가바이트)	1 terabyte
1024 terabyte (테라바이트)	1 petabyte
1024 petabyte (페타바이트)	1 exabyte
1024 exabyte (엑사바이트)	1 zettabyte

데이터 종류
정수형
데이터 타입	메모리의 크기	표현 가능 범위
byte		1 byte		-128 ~ 127
short		2 byte		-32,768 ~ 32,767
int		4 byte		-2,147,483,648~2,147,483,647
long		8 byte		-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807

실수형
float		4byte		±(1.40129846432481707e-45 ~ 3.40282346638528860e+38)
double		8byte		±(4.94065645841246544e-324d ~ 1.79769313486231570e+308d)

문자
char		2byte		모든 유니코드 문자

상수와 데이터 타입
실수의 표현: 자바에서 실수형 상수는 double의 데이터 타입, double a = 2.2; float a = 2.2F;
정수의 표현: 자바에서 정수형 상수는 int의 데이터 타입
int a = 2147483648; // 오류, int의 최댓값인 2147483647 보다 1 많음
long a = 2147483648; // "The literal 2147483648 of type int is out of range", 변수는 long 타입이지만 이 변수에 대입되는 상수가 여전히 int 타입이기 때문에 int로 표현할 수 있는 최대 숫자를 여전히 초과
long a = 2147483648L; // 오류 해결, 상수도 long 타입이 되었고, 그 상수를 담을 변수도 long 타입
byte a = 100;, short b = 200; //  int 보다 작은 데이터 타입인 short나 byte는 int 형을 허용

형 변환(Type Conversion) 
자동 형 변환(implicit Conversion)
타입을 변경해도 정보의 손실이 일어나지 않는 경우 자동 형 변환이 일어남, 연산 중에도 발생
double a = 3.0F; // 자동으로 double 타입으로 형 변환, double 타입이 float 타입보다 더 많은 수를 표현 할 수 있음,
float a = 3.0; // double 형 값을 표현 범위가 좁은 float에 넣으려고 하기 때문에 오류가 발생

자동 형 변환이 일어나는 규칙
byte -> short, char -> int -> long -> float -> double

명시적 형 변환(Explicit Conversion)
자동 형 변환이 적용되지 않는 경우에는 수동으로 형 변환을 해야 함, 데이터 손실이 있을 수 있음

조건문 - switch
switch, case, break, default. switch 문을 사용할 때 한가지 주의 할 것은 switch의 조건으로는 몇가지 제한된 데이터 타입만을 사용할 수 있다. byte, short, char, int, enum, String, Character, Byte, Short, Integer

반복문의 제어 - break, continue
break : 반복문 안에서 break가 실행되면 반복문을 즉시 종료시킴
continue : continue 구문은 이 명령이 나타나는 이후의 로직을 실행하지 않도록 함, 하지만 반복문 자체를 중단하는 것이 아니고 다시 반복문이 실행됨

배열(Array)
연관된 데이터를 모아서 관리하기 위해서 사용하는 데이터 타입

반복문과 배열
String[] members = { "최진혁", "최유빈", "한이람" };
for (int i = 0; i < members.length; i++) {
    String member = members[i];
    System.out.println(member + "이 상담을 받았습니다");
}

for-each
for (String e : members) {
    System.out.println(e + "이 상담을 받았습니다");
}

배열의 한계
배열은 초기화할 때 그 크기가 정해져서 정해진 크기 이상의 값을 넣을 수 없음 -> Collection(Container) 사용

메소드
매개변수와 인자
매개변수(parameter) : 메소드의 입력 값, 호출에서 입력한 값(인자)을 로직으로 매개 함
인자(argument) : 메소드를 호출할 때 전달된 값

객체 지향 프로그래밍(OOP: Object Oriented Programming)
객체: 상태와 행위로 이루어짐, 재활용성이 높아짐

설계
복잡한 현실을 추상화하는 과정
추상화(abstract) : 반영해야할 현실을 소프트웨어로 단순화시켜서 만드는 행위

부품화
객체를 만든다 -> 로직을 재활용 가능하도록 부품화한다.
초창기 컴퓨터(본체, 모니터, 키보드 단일화) -> 컴퓨터(본체, 모니터, 키보드, 마우스로 부품화 됨)
메소드: 코드의 중복을 줄이고, 유지보수가 쉬워짐

은닉화, 캡슐화 (Information Hiding, Encapsulation)
내부의 동작 방법을 단단한 케이스 안으로 숨기고 사용자에게는 그 부품의 사용방법만을 노출하는것

인터페이스(interface)
부품들간의 약속, 컴퓨터<->모니터 HDMI 케이블 규격

클래스, 인스턴스, 객체 (class, instance, object)
클래스: 객체를 만들기 위한 설계도
인스턴스: 설계도에 따라 만들어진 구체적인 제품
객체: 변수와 메소드의 집합, 작은 프로그램, 일반적으로 설계도인 클래스가 구체적인 실체인 인스턴스가 되었을 때 객체라고 부름
리펙토링: 기존과 동작은 같은데 중복을 제거, 코드의 내용을 개선해서 보다 효율적으로 만드는 행위

메소드가 많이지면 생기는 문제점: 사용하는 데이터(변수)와 연산(메소드) 사이의 거리가 멀어져 중간에 다른 코드의 개입이 있을 수 있음, 코드가 엉켜 복잡해짐 -> 객체지향(서로연관있는 변수와 메소드를 그룹핑)으로 해결

객체화
Calculator c1 = new Calculator(); //인스턴스: c1, 구체적인 객체

클래스 맴버, 인스턴스 맴버
클래스 맴버: static, 모든 인스턴스가 공유, 클래스를 통해 접근
인스턴스 맴버: 각각의 인스턴스마다 다르게 처리
클래스 메소드: 한번만 사용하면 되는 경우, 인스턴스를 만들 필요없어 메모리 절약

필드(field) : 클래스 전역에서 접근 할 수 있는 변수를 의미함
인스턴스 변수: Non-Static Field
클래스 변수: Static Field

클래스 맴버, 인스턴스 맴버들 간의 관계
1. 인스턴스 메소드는 클래스 맴버에 접근 할 수 있다. //인스턴스가 생성되었다는 것은 클래스가 이미 생성되어 있다는 의미
2. 클래스 메소드는 인스턴스 맴버에 접근 할 수 없다. //프로그램 실행 시 클래스가 인스턴스 생성전에 만들어지므로 아직 없는 것을 사용못함

유효범위
프로그램이 커지면 여러 가지 이유로 이름이 충돌 -> 유효범위. 스코프(scope)로 해결

전역변수(global variables) : 클래스 전역에서 유효
지역변수(local variables) : 지역(중괄호) 안에서만 유효

인스턴스의 유효범위
this : 인스턴스 자신을 의미함, 어떤 지역에 이름이 같은 지역변수와 전역변수가 있을 때 지역변수가 우선순위가 큼 -> 전역변수를 사용하려면 this키워드를 붙여줌

초기화, 생성자 (initialize, constructor)
생성자: 인스턴스 생성시 맴버 변수를 초기화 해줌. 명시하지 않으면 자동으로 기본생성자를 생성

상속(inheridance)
extends, 어떤 객체가 있을 때 그 객체의 필드(변수)와 메소드를 다른 객체가 물려 받을 수 있는 기능
객체 수정이 어려운 경우 상속으로 해결
1. 객체를 자신이 만들지 않아서 소스 변경을 할 수 없다.
2. 객체가 다양한 곳에서 활용되고 있는데 메소드를 추가하면 다른 곳에서는 불필요한 기능이 포함될 수 있다.

부모 클래스(상위 클래스) : 기존에 가진 기능을 물려줌
자식 클래스 (하위 클래스) : 기존 객체의 기능을 물려받음, 필요한 기능 추가, 부모의 기능 수정

상속, 생성자
자식 클래스의 인스턴스를 생성할 때 프로그램은 부모 클래스 생성자를 먼저 호출함 -> 이때 부모 클래스의 생성자가 명시적으로 선언되어 있다면 기본생성자가 없어서 에러 발생 -> 부모 클래스에 기본생성자를 명시적으로 선언해주거나 자식클래스의 생성자에서 super로 부모클래스의 생성자를 호출해줌, 자식클래스에서 부모클래스를 호출할 경우 그 외의 초기화는 super다음에 위치해야함

재정의(overriding)
부모클래스의 메서드를 상속받았지만 사용하지 않고 자식클래스에서 재정의해서 사용하는 것, super로 부모 메소드를 호출해 기능을 가져오고 추가로 변경할 수도 있음
규칙: 메소드명, 매개변수 갯수,데이터 타입,순서, 메소드의 리턴 타입이 같아야 한다.
 
오버로딩(overloading)
동일한 이름의 메소드를 여러개 정의하는 것
규칙: 매개변수 갯수,데이터 타입,순서가 달라야 한다.

클래스 패스(class path)
클래스가 위치하는 경로를 지정, 자바가 필요로하는 클래스를 로드할 수 있게 해줌, java 명령어 실행 시 -classpath 옵션으로 설정가능, javac 명령어로 컴파일 시 -d 옵션으로 생성되는 class파일 위치 지정 가능 
환경 변수: 클래스가 위치한 위치를 CLASSPATH에 잡아주면 -classpath 생략가능

패키지(package)
클래스 이름이 충돌하는 것을 방지해줌, 다른 패키지에 있는 클래스를 사용하려면 import 필요

API와 API 문서 보는 법
System.out.println(1); // System: 클래스, out: static 변수, println(): 메소드
import java.lang.*; // import 하지 않아도 java가 암시적으로 제공
API(Application Programming Interface) : 개발자 <-> API, 자바 시스템을 제어하기 위해서 자바에서 제공하는 명령어들
UI(User Interface) : 사용자 <-> UI, 시스템 제어, 지휘

접근제어자
public : 같은 클래스, 같은 패키지, 다른 패키지 서브 클래스, 관계 없음
protected : 같은 클래스, 같은 패키지, 다른 패키지 서브 클래스 // 다른 패키지 서브 클래스 : 상속받아서만 사용 가능, this키워드 사용 시 사용하려는 맴버가 현재 클래스에 없으면 부모 클래스 맴버를 사용
default : 같은 클래스, 같은 패키지 // 같은 패키지 
private : 같은 클래스

클래스의 접근 제어자
public : 다른 패키지의 클래스에서도 사용 가능 // public 클래스가 포함된 소스코드는 public 클래스의 클래스 명과 소스코드의 파일명이 같아야 함 (하나의 파일에 하나의 public 클래스만 존재 할 수 있음)
default : 같은 패키지에서만 사용 가능


추상(abstract)
abstract, 클래스나 메소드를 사용하기 위해서는 반드시 상속해서 사용하도록 강제함
추상 클래스 : 구체적인 로직을 담고 있지 않고 로직을 사용하기 위한 형식만 가지고 있음, 반드시 상속받아서 사용해야함
추상 메소드 : 본체가 없고 선언만 되어있음, 추상 클래스를 상속받아서 추상 메소드를 오버라이딩해 줘야함
사용 이유 : 규모가 있고 다양한 용도에서 사용될 수 있는 기능이 있을 때 부모 클래스에서는 기능의 공통적인 부분, 자식 클래스에서는 달라지는 부분을 구현하도록 유도

디자인 패턴 : 해결하고자 하는 구조에 따라 template pattern, iterator, composite, visitor, proxy, .... 여러 방식의 디자인 패턴이 있음

final
상속이나 변경을 규제
final 필드 : 값을 변경할 수 없음
final 메소드 : 자식클래스에서 부모 클래스의 final 메소드를 오버라이딩할 수 없음
final 클래스 : final 클래스는 상속받을 수 없음

인터페이스(Interface)
implements, 어떤 객체가 있고 그 객체가 특정한 인터페이스를 사용한다면 그 객체는 반드시 인터페이스의 메소드들을 구현해야 함, 시그니쳐 약속을 통해 커뮤니케이션 실수를 방지
특징
1. 하나의 클래스가 여러 개의 인터페이스를 구현할 수 있다.
2. 인터페이스 간에 상속이 가능하다.
3. 인터페이스의 맴버는 반드시 public이다.

다형성(Polymorphism)
하나의 메소드나 클래스가 다양한 방법으로 동작함
메소드 오버로딩 : 같은 이름, 다른 동작 방법

클래스와 다형성 (상속과 오버라이딩 그리고 형변환을 이용한 다형성)
1. 클래스 B의 데이터 타입을 클래스 A로 인스턴스화 했을 때 클래스 B의 메소드 y는 마치 존재하지 않는 것처럼 실행되지 않았다. => 클래스 B가 클래스 A화 되었다.
2. 클래스 B의 데이터 타입을 클래스 A로해서 인스턴스화 했을 때 클래스 B의 메소드 x를 실행하면 클래스 A에서 정의된 메소드가 아니라 클래스 B에서 정의된 메소드가 실행 되었다. => 클래스 B의 기본적인 성질은 그대로 간직하고 있다.
3. 클래스 B를 클래스 A의 데이터 타입으로 인스턴스화 했을 때 클래스 A에 존재하는 맴버만이 클래스 B의 맴버가 된다. 동시에 클래스 B에서 오버라이딩한 맴버의 동작방식은 그대로 유지한다.
부모 클래스에서 공통된 부분에 매개변수로 인스턴스를 써야할 때 자식 클래스 데이터 타입을 부모 클래스로 인스턴스화 함으로 애매함을 해결

인터페이스와 다형성
여러 인터페이스를 하나의 클래스에 구현한 경우나 하나의 인터페이스를 구현한 클래스가 많을 경우, 클래스의 데이터 타입으로 인터페이스를 지정해주거나 인스턴스화할 구현 클래스를 지정해 줌으로서 기능을 제어할 수 있다. 

예외(exception)
try, catch, finally, 프로그램 실행 시 발생하는 오류를 처리하는 것
자주 사용되는 예외 : IllegalArgumentException, IllegalStateException, NullPointerException, IndexOutOfBoundsException, ArithmeticException

예외 던지기
throws, 호출한 부분으로 예외를 넘길수 있음, FileNotFoundException, IOException, ... 여러 예외들을 한번에 넘길 수 있음
예외를 받은 곳에서는 try, catch로 처리해줘야함, catch문을 else if문과 같이 사용할 수 있음

예외 만들기
throw new Exception("메세지");, 예외가 생길 수 있는 부분에 조건을 주어 의도적으로 예외 발생시킴, 호출한 부분에서 예외를 받음

예외의 선조(Throwable)
Throwable - Exception - IOException
                      - RuntimeException - ArithmeticException
부모 중에 RuntimeException이 있는 예외는 unchecked, 예외처리가 필수는 아님
부모 중에 RuntimeException이 없는 예외는 checked, 예외처리가 필수(Exception, IOException,...)

모든 클래스의 조상(Object)
extends Object // 다른 클래스를 상속받지 않으면 자바가 암시적으로 Object를 상속받게함

Object 클래스 메소드
toString() : 패키지.클래스@주소값 문자열 생성, toString을 직접 호출하지 않아도 어떤 객체를 System.out.print로 호출하면 자동으로 toString이 호출되도록 약속되어있음, 오버라이딩 가능
equals() : Object의 equals는 객체와 객체가 같은 것인지를 비교, String의 equals는 오버라이딩 되어서 문자열 비교, source - generate hashCode() and equals()
finalize() : 객체가 소멸될 때 호출되기로 약속된 메소드(사용 지양), 가비지 컬렉션(GC:Garbage Collection), 자바는 오랫동안 사용하지 않는 변수, 인스턴스를 메모리 RAM에서 자동으로 정리해줌
clone() : 어떤 객체를 똑같은 객체로 복제해줌(주소값 다름, 내용만 복제), implements Cloneable, Cloneable 인터페이스는 비어있지만 명시적으로 객체가 복제가능한 클래스인지 JVM에 알려주는 식별자 역할을 함, Object 클래스의 clone메서드를 오버라이딩(public으로 바꾸는 것을 권장) 한 후 인스턴스에서 사용 가능, Clone 메서드는 protected를 접근제어자로 가지기 때문에 Object 인스턴스로는 직접 호출 불가능, CloneNotSupportedException 예외 처리를 해줘야 함 

상수와 enum
기존 상수의 사용 
1. int type = 1; // 1. 사과 2. 복숭아 3. 바나나
2. private final static int APPLE = 1; int type = APPLE; // 상수에 이름을 부여해줌
3. private final static int FRUIT_APPLE = 1; int type = FRUIT_APPLE; // 기업의 APPLE과 이름이 겹침을 해결
4. interface FRUIT{ int APPLE=1, PEACH=2, BANANA=3; }  int type = FRUIT.APPLE; // 이름을 깔끔하게 해줌, 과일과 기업의 APPLE 비교 시 컴파일 오류가 나지 않음
5. class Fruit{ public static final Fruit APPLE  = new Fruit(); ... }  Fruit.APPLE // 과일과 기업의 APPLE 비교 시 컴파일 오류가 남, 데이터 타입으로 인해 switch문에서 사용 불가

enum
열거형(enumerated type) : 서로 연관된 상수들의 집합
enum Fruit { APPLE, PEACH, BANANA; }  Fruit type = Fruit.APPLE; // 코드 간결화, 인스턴스 생성과 상속을 방지, 키워드 enum으로 인해 의도가 열거임을 명시

enum과 생성자
enum Fruit { // 생성자, 필드, 메소드를 가짐
	APPLE("red"), PEACH("pink"), BANANA("yellow"); // 생성자 호출
	private String color; // 상수가 값을 갖게 할 수 있음
	public String getColor(){
		return this.color;
	}
	Fruit(String color){ 
		System.out.println("call Constructor " + this); this.color = color; 
	} 
}
Fruit.APPLE.getColor();
for(Fruit f : Fruit.values()) { // values메서드를 이용해서 상수들(enum)의 배열을 사용할 수 있음
	System.out.println(f); //APPLE, PEACH, BANANA
}


참조(reference)
call by value : 기본 데이터 타입, 값 복사
call by reference : new 로 생성한 인스턴스에서 발생, 주소 참조
메소드 parameter, argument 사이에서도 발생할 수 있음


제네릭(Generic)
클래스 내부에서 사용할 데이터 타입을 외부에서 지정하는 기법

제네릭을 사용 안할 경우
코드의 중복을 제거하기위해 Object 데이터 타입을 사용할 경우, 다른 데이터 타입이 인자로 들어와도 컴파일 에러가 발생하지 않는다(타입 안정성이 없음). java.lang.ClassCastException은 런타임 에러. 컴파일 언어의 기본은 모든 에러는 컴파일이 발생할 수 있도록 유도해야 한다는 것이다

제네릭을 사용할 경우
컴파일 단계에서 오류가 검출된다. 중복의 제거와 타입 안전성을 동시에 추구할 수 있게 되었다.

제네릭의 특징
복수의 제네릭 사용가능, 메소드에서도 사용가능, 제네릭 생략 가능(자바가 인자의 값을 통해 데이터 타입을 추측)
제네릭은 참조 데이터 타입만 사용할 수 있음(기본 데이터 타입 -> 래퍼(wrapper) 클래스)
class EmployeeInfo{
    public int rank;
    EmployeeInfo(int rank){ this.rank = rank; }
}
class Person<T, S>{
    public T info;
    public S id;
    Person(T info, S id){ 
        this.info = info;
        this.id = id;
    }
    public <U> void printInfo(U info){
        System.out.println(info);
    }
}
public class GenericDemo {
    public static void main(String[] args) {
        EmployeeInfo e = new EmployeeInfo(1);
        Integer i = new Integer(10);
        Person<EmployeeInfo, Integer> p1 = new Person<EmployeeInfo, Integer>(e, i);
        p1.<EmployeeInfo>printInfo(e);
        p1.printInfo(e);
    }
}

제네릭의 제한
제네릭에 extends로 부모클래스, 인터페이스를 지정해 줌으로서 인자로 들어오는 데이터 타입을 특정 클래스의 자식, 인터페이스의 구현 클래스로 제한할 수 있음.
interface Info{
    int getLevel();
}
class EmployeeInfo implements Info{
    public int rank;
    EmployeeInfo(int rank){ this.rank = rank; }
    public int getLevel(){
        return this.rank;
    }
}
class Person<T extends Info>{
    public T info;
    Person(T info){ this.info = info; }
}
public class GenericDemo {
    public static void main(String[] args) {
        Person p1 = new Person(new EmployeeInfo(1));
        Person<String> p2 = new Person<String>("부장"); // 에러
    }
}

컬렉션 프레임워크(Collections Framework)
배열과 컬렉션즈 프레임워크
배열: 한번 정해진 배열의 크기를 변경할 수 없다, length 속성, index 사용
컬렉션: 크기를 미리 지정하지 않기 때문에 얼마든지 많은 수의 값을 저장할 수 있다, size, add 메서드 사용

컬렉션즈 프레임워크
다른 말로는 컨테이너라고도 부른다. Collection과 Map이라는 최상위 카테고리가 있고, 그 아래에 다양한 컬렉션들이 존재.
Collection - Set - HashSet, LinkedHashSet, TreeSet
           - List - ArrayList, Vector, LinkedList
           - Queue - PriorityQueue

Map - SortedMap - TreeMap
    - Hashtable
    - LinkedHashMap
    - HashMap

Collection
컬렉션을 사용할 때는 데이터 타입은 가급적 해당 컬렉션을 대표하는 인터페이스를 사용하는 것이 좋다. (Set, List, Map)
참조 : https://prashantgaurav1.files.wordpress.com/2013/12/java-util-collection.gif

List와 Set의 차이점
Set : HashSet, 중복되는 값은 추가되지 않음, 고유한 값을 가짐, 순서가 보장되지 않음(집합)
List : ArrayList, 입력한 값들이 모두 추가됨, 순서가 보장됨(get 메서드, index 사용)

Iterator : 반복자, for 문을 이용하는 것과 동일하게 데이터를 순차적으로 처리할 수 있다. 메소드 iterator는 인터페이스 Collection에 정의되어 있다. 따라서 Collection을 구현하고 있는 모든 컬렉션즈 프레임워크는 이 메소드를 구현하고 있음을 보증한다. 메소드 iterator의 호출 결과는 인터페이스 Iterator를 구현한 객체를 리턴한다.
Iterator ai = al.iterator();
while(ai.hasNext()){
    System.out.println(ai.next());
}

Set 메서드
containsAll : B가 A의 부분집합
addAll : A와 B의 합집합
retainAll : A와 B의 교집합
removeAll : A 에서 B를 뺀 차집합

Map
HashMap, key, value를 가짐, put, get 메서드 사용
Map 데이터 열거
static void iteratorUsingForEach(HashMap map){
    Set<Map.Entry<String, Integer>> entries = map.entrySet();
    for (Map.Entry<String, Integer> entry : entries) {
        System.out.println(entry.getKey() + " : " + entry.getValue());
    }
}
static void iteratorUsingIterator(HashMap map){
    Set<Map.Entry<String, Integer>> entries = map.entrySet();
    Iterator<Map.Entry<String, Integer>> i = entries.iterator();
    while(i.hasNext()){
        Map.Entry<String, Integer> entry = i.next();
        System.out.println(entry.getKey()+" : "+entry.getValue());
    }
}

Collection 정렬
main
Collections.sort(computers); // List의 정렬을 수행, 클래스 Collectors는 다양한 클래스 메소드를 가짐
class
implements Comparable // sort의 인자 list의 제네릭은 <T> coparable을 extends 하고 있어야 한다
public int compareTo(Object o) { // Comparable은 인터페이스인데 이를 구현하고 있는 클래스는 compareTo 메소드를 가짐
    return this.serial - ((Computer)o).serial; // 정렬 기준을 정해줌
}
